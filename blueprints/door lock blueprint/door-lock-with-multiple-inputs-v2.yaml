# https://www.home-assistant.io/docs/blueprint/tutorial/
blueprint:
  name: Smart Door Auto-Lock (override + door-open safe)
  description: >
    Auto-locks when the door has been closed for a period or when presence is away.
    Never locks while open (waits for close with timeout). Override toggle disables all auto-locking.
    When override turns OFF and the door is closed & unlocked, lock immediately.
    Includes per-run debug: traces + system_log + logbook snapshot.
  domain: automation
  input:
    lock_entity:
      name: Lock
      selector:
        entity:
          filter:
            - domain: lock

    contact_entity:
      name: Door contact
      selector:
        entity:
          filter:
            - domain: binary_sensor
              device_class: door
            - domain: binary_sensor
              device_class: opening

    presence_entity:
      name: Presence (person or device_tracker)
      selector:
        entity:
          filter:
            - domain: person
            - domain: device_tracker

    override_boolean:
      name: Override toggle
      selector:
        entity:
          filter:
            - domain: input_boolean

    away_state:
      name: Away state for presence
      default: 'not_home'
      selector:
        text: {}

    away_for:
      name: Away for (grace)
      default: '00:05:00'
      selector:
        duration: {}

    door_closed_for:
      name: Closed stability time
      default: '00:00:15'
      selector:
        duration: {}

    away_wait_timeout:
      name: Max wait for close (when away)
      default: '00:10:00'
      selector:
        duration: {}

    grace_before_lock:
      name: Final grace before locking
      default: '00:00:10'
      selector:
        duration: {}

    contact_open_is_on:
      name: Contact open equals 'on'
      description: Flip off if your sensor reports ON=closed.
      default: true
      selector:
        boolean: {}

    auto_lock_time:
      name: Auto-lock time at night
      description: Time when the lock should auto-lock (e.g., 23:00 for 11pm)
      default: '23:00'
      selector:
        time: {}

mode: restart
max_exceeded: silent

variables:
  lock: !input lock_entity
  contact: !input contact_entity
  presence: !input presence_entity
  override: !input override_boolean
  auto_lock_time: !input auto_lock_time
  away_state: !input away_state
  contact_open_is_on: !input contact_open_is_on
  override_state: '{{ states(override) }}'

triggers:
  # Door position changed (open/close), and held for enough time
  - id: door_state_to_on
    trigger: state
    entity_id: !input contact_entity
    to: 'on'

  - id: door_state_to_off
    trigger: state
    entity_id: !input contact_entity
    to: 'off'

  # Presence away long enough
  - id: away
    trigger: state
    entity_id: !input presence_entity
    to: !input away_state
    for: !input away_for

  # Override changed; ON cancels waits (mode: restart), OFF: may lock immediately
  - id: override_changed
    trigger: state
    entity_id: !input override_boolean

  # Night auto-lock trigger
  - id: night_auto_lock
    trigger: time
    at: !input auto_lock_time

actions:
  # -------- DEBUG: snapshot everything on EVERY trigger --------
  - alias: 'DEBUG: Snapshot inputs into trace vars'
    variables:
      _dbg_trigger: "{{ trigger.id | default('null') }}"

      contact_state: '{{ states(contact) }}'
      door_position: >
        {% if contact_open_is_on | bool %}
          {{ 'open' if is_state(contact,'on') else 'closed' if is_state(contact,'off') else contact_state }}
        {% else %}
          {{ 'open' if is_state(contact,'off') else 'closed' if is_state(contact,'on') else contact_state }}
        {% endif %}

      presence_state: '{{ states(presence) }}'
      lock_state: '{{ states(lock) }}'

      t: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      _dbg_lock_name: "{{ state_attr(lock, 'friendly_name') | default(lock) }}"

      auto_lock_dt: >
        {{ now().replace(hour=(auto_lock_time.split(':')[0]|int),
                      minute=(auto_lock_time.split(':')[1]|int),
                      second=auto_lock_time.split(':')[2]|int,
                      microsecond=0) | as_datetime }}

  - alias: 'DEBUG: Write to system_log'
    action: 'system_log.write'
    data:
      level: 'info'
      message: >-
        Smart Door Auto-Lock | trigger={{ _dbg_trigger }} | t={{ t }}
        | lock={{ lock_state }} | position={{ door_position }}
        | presence={{ presence_state }} | override={{ override_state }} | away_state={{ away_state }}
        | night_auto_lock={{ auto_lock_dt }}

  - alias: 'DEBUG: Logbook entry (door)'
    action: 'logbook.log'
    data:
      name: 'Smart Door Auto-Lock'
      message: >-
        Trigger={{ _dbg_trigger }} | Position={{ door_position }}
        | Lock={{ lock_state }} | Presence={{ presence_state }} | Override={{ override_state }}
        | Night Auto Lock={{ auto_lock_dt }}
      entity_id: !input contact_entity

  - alias: 'DEBUG: Logbook entry (lock)'
    action: 'logbook.log'
    data:
      name: 'Smart Door Auto-Lock'
      message: >-
        Trigger={{ _dbg_trigger }} | Position={{ door_position }}
        | Lock={{ lock_state }} | Presence={{ presence_state }} | Override={{ override_state }}
        | Night Auto Lock={{ auto_lock_dt }}
      entity_id: !input lock_entity

  # -------- Early exit if override is ON (but after debug) --------
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ override_state == 'on' }}" # ON == means Override Enabled
        sequence:
          - stop: 'Override is ON; skipping auto-lock'

  # -------- Main logic --------
  - choose:
      # Case 0: Override just turned OFF — lock immediately if closed & unlocked
      - conditions:
          - condition: trigger
            id: override_changed
          - condition: template
            value_template: "{{ override_state == 'off' }}" # should be OFF due to above
          - condition: template
            value_template: "{{ lock_state == 'unlocked' }}"
          - condition: template
            value_template: "{{ door_position == 'closed' }}"
        sequence:
          - action: 'lock.lock'
            target:
              entity_id: !input lock_entity

      # Case 1: Door closed enough — lock (if unlocked)
      - conditions:
          - condition: or
            conditions:
              - condition: and
                conditions:
                  - condition: template
                    value_template: '{{ contact_open_is_on | bool }}'
                  - condition: trigger
                    id: door_state_to_off
              - condition: and
                conditions:
                  - condition: template
                    value_template: '{{ not (contact_open_is_on | bool) }}'
                  - condition: trigger
                    id: door_state_to_on
          - condition: template
            value_template: "{{ lock_state == 'unlocked' }}"
          - condition: template
            value_template: "{{ door_position == 'closed' }}"
        sequence:
          - delay: !input grace_before_lock
          - action: 'lock.lock'
            target:
              entity_id: !input lock_entity

      # Case 2: Away — lock only if/when door is closed
      - conditions:
          - condition: trigger
            id: away
          - condition: template
            value_template: "{{ lock_state == 'unlocked' }}"
        sequence:
          # If door open, wait for closed (stable) up to timeout
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ door_position == 'open' }}"
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: '{{ contact_open_is_on | bool }}'
                        sequence:
                          - wait_for_trigger:
                              - trigger: state
                                entity_id: !input contact_entity
                                to: 'off'
                                for: !input door_closed_for
                            timeout: !input away_wait_timeout
                            continue_on_timeout: true
                      - conditions:
                          - condition: template
                            value_template: '{{ not (contact_open_is_on | bool) }}'
                        sequence:
                          - wait_for_trigger:
                              - trigger: state
                                entity_id: !input contact_entity
                                to: 'on'
                                for: !input door_closed_for
                            timeout: !input away_wait_timeout
                            continue_on_timeout: true

          # If still open after waiting, stop
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ door_position == 'open' }}"
                sequence:
                  - stop: 'Door is open; skipping lock.'

          # Final check and lock
          - condition: template
            value_template: '{{ presence_state == away_state }}'
          - delay: !input grace_before_lock
          - condition: template
            value_template: "{{ door_position == 'closed' }}"
          - action: 'lock.lock'
            target:
              entity_id: !input lock_entity

      # Case 3: Night auto-lock
      - conditions:
          - condition: trigger
            id: night_auto_lock
          - condition: template
            value_template: "{{ lock_state == 'unlocked' }}"
          - condition: template
            value_template: "{{ door_position == 'closed' }}"
        sequence:
          - action: 'lock.lock'
            target:
              entity_id: !input lock_entity

    # Default: do nothing
    default:
      - alias: 'No action taken log (door)'
        action: 'logbook.log'
        data:
          name: 'Smart Door Auto-Lock'
          message: >-
            Trigger={{ _dbg_trigger }} | Position={{ door_position }}
            | Lock={{ lock_state }} | Presence={{ presence_state }} | Override={{ override_state }}
            | Night Auto Lock={{ auto_lock_dt }} --> NOOP
          entity_id: !input contact_entity

      - alias: 'No action taken log (lock)'
        action: 'logbook.log'
        data:
          name: 'Smart Door Auto-Lock'
          message: >-
            Trigger={{ _dbg_trigger }} | Position={{ door_position }}
            | Lock={{ lock_state }} | Presence={{ presence_state }} | Override={{ override_state }}
            | Night Auto Lock={{ auto_lock_dt }} --> NOOP
          entity_id: !input lock_entity
