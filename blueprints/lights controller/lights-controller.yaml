blueprint:
  name: Room-style lights controller
  description: |
    Generic version of the original “basement lights controller”.
    All entities are exposed as inputs and the following inputs are optional:
    - bottom_button_events
    - extra_light_groups
    - motion_sensors
    - rgb_device_ids
    - top_button_events
    - white_device_ids
    - bypass_internal - bypass flag is stored in an internal helper (`input_boolean.bypass_internal`)
    - timer_reset_duration - The timer-reset input

  domain: automation
  source_url: https://github.com/isaackehle/homeassistant/blueprints # optional

  input:
    # ── Sensors ────────────────────────────────────────
    door_sensors:
      name: Door sensors
      description: Binary sensors that indicate a door (or similar) opening.
      selector:
        entity:
          filter:
            domain: binary_sensor
          multiple: true

    motion_sensors:
      name: Motion sensors
      description: Binary sensors that indicate occupancy or motion.
      default: [] # optional
      selector:
        entity:
          filter:
            domain: binary_sensor
          multiple: true

    # ── Timer ──────────────────────────────────────────
    timer_entity:
      name: Motion timer
      description: Timer that keeps the lights on after the last trigger.
      selector:
        entity:
          filter:
            domain: timer
          multiple: false

    timer_reset_duration:
      name: Timer reset duration
      description: How long the timer should stay active after each trigger.
      default: '00:20:00'
      selector:
        text:

    # ── Light groups ───────────────────────────────────
    primary_light_group:
      name: Primary light group
      description: Main group of lights turned on/off (e.g., ceiling bulbs).
      selector:
        entity:
          filter:
            domain: light
          multiple: true

    extra_light_groups:
      name: Additional light groups
      description: Optional extra groups (colour bulbs, LED strips) that are turned off when the timer ends or a bottom-button single press occurs.
      default: [] # optional
      selector:
        entity:
          filter:
            domain: light
          multiple: true

    # ── Devices that need colour-temp settings ───────────
    white_device_ids:
      name: White-temperature devices
      description: Device IDs that should be set to 6500 K, 100 % brightness.
      default: [] # optional
      selector:
        device:
          multiple: true # any integration works

    # ── Devices that need pure-white RGB setting ────────
    rgb_device_ids:
      name: RGB devices
      description: Device IDs that should be set to RGB 255-255-255, 100 % brightness.
      default: [] # optional
      selector:
        device:
          multiple: true # any integration works

    # ── Button events ───────────────────────────────────
    top_button_events:
      name: Top-button event entities
      description: Event entities that fire when a “top” button is pressed.
      default: [] # optional
      selector:
        entity:
          filter:
            domain: event
          multiple: true

    bottom_button_events:
      name: Bottom-button event entities
      description: Event entities that fire when a “bottom” button is pressed.
      default: [] # optional
      selector:
        entity:
          filter:
            domain: event
          multiple: true

    # ── Internal bypass helper (no user input) ───────────
    internal_bypass:
      name: Internal bypass helper
      description: >
        The entity that stores the bypass flag internally.
        Must be an existing `input_boolean` with the exact entity_id
        `input_boolean.bypass_internal`.  It is **not** exposed to the user.
      default: input_boolean.bypass_internal
      selector:
        entity:
          filter:
            domain: input_boolean
          multiple: false

trigger:
  # Door opened -------------------------------------------------
  - trigger: state
    entity_id: !input door_sensors
    to: 'on'
    from: 'off'
    id: door_opened

  # Motion detected (any of the listed sensors) ---------------
  - trigger: state
    entity_id: !input motion_sensors
    to: 'on'
    id: motion_detected

  # Timer becomes idle (i.e. expires) -------------------------
  - trigger: state
    entity_id: !input timer_entity
    from: '*'
    to: idle
    id: motion_timer_ended

  # Top-button single press ------------------------------------
  - trigger: state
    entity_id: !input top_button_events
    attribute: event_type
    to: KeyPressed
    id: top_button_pressed_1x

  # Top-button double press (toggle bypass) -------------------
  - trigger: state
    entity_id: !input top_button_events
    attribute: event_type
    to: KeyPressed2x
    id: top_button_pressed_2x

  # Bottom-button single press ---------------------------------
  - trigger: state
    entity_id: !input bottom_button_events
    attribute: event_type
    to: KeyPressed
    id: bottom_button_pressed_1x

  # Bottom-button double press (toggle bypass) ----------------
  - trigger: state
    entity_id: !input bottom_button_events
    attribute: event_type
    to: KeyPressed2x
    id: bottom_button_pressed_2x

condition: [] # No global conditions – each branch handles its own logic

action:
  - choose:
      # ── Door opened ───────────────────────────────────────
      - conditions:
          - condition: trigger
            id: door_opened
        sequence: &activate_sequence
          - action: timer.start
            data:
              duration: '{{ timer_reset_duration }}'
            target:
              entity_id: !input timer_entity
          - action: light.turn_on
            target:
              entity_id: !input primary_light_group
          # White-temperature devices (optional)
          - repeat:
              count: '{{ white_device_ids | length }}'
              sequence:
                - action: light.turn_on
                  data:
                    color_temp_kelvin: 6500
                    brightness_pct: 100
                  target:
                    device_id: '{{ white_device_ids[repeat.index] }}'
          # RGB devices (optional)
          - repeat:
              count: '{{ rgb_device_ids | length }}'
              sequence:
                - action: light.turn_on
                  data:
                    rgb_color: [255, 255, 255]
                    brightness_pct: 100
                  target:
                    device_id: '{{ rgb_device_ids[repeat.index] }}'

      # ── Motion detected ─────────────────────────────────--
      - conditions:
          - condition: trigger
            id: motion_detected
        sequence: *activate_sequence

      # ── Top-button single press (same as door/motion) ───────
      - conditions:
          - condition: trigger
            id: top_button_pressed_1x
        sequence: *activate_sequence

      # ── Bottom-button single press – turn everything off ───
      - conditions:
          - condition: trigger
            id: bottom_button_pressed_1x
        sequence:
          - action: timer.cancel
            target:
              entity_id: !input timer_entity
          - action: light.turn_off
            data:
              entity_id: >-
                {{ (primary_light_group + extra_light_groups) | join(',') }}

      # ── Top-button double press – toggle internal bypass ───
      - conditions:
          - condition: trigger
            id: top_button_pressed_2x
        sequence:
          - action: input_boolean.toggle
            target:
              entity_id: !input internal_bypass

      # ── Bottom-button double press – toggle internal bypass ─
      - conditions:
          - condition: trigger
            id: bottom_button_pressed_2x
        sequence:
          - action: input_boolean.toggle
            target:
              entity_id: !input internal_bypass

      # ── Timer reached idle – turn lights off unless bypass is on ─────────────────
      - conditions:
          - condition: trigger
            id: motion_timer_ended
          - condition: template
            # If the internal bypass is **off**, we turn the lights off.
            # If it is **on**, we do nothing (lights stay on).
            value_template: >-
              {{ states(internal_bypass) == 'off' }}
        sequence:
          - action: light.turn_off
            data:
              entity_id: >-
                {{ (primary_light_group + extra_light_groups) | join(',') }}

mode: single
