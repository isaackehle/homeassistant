blueprint:
  name: Room-style lights controller
  description: |
    • Reacts to doors, motion, button presses, and a timer.
    • Optional bypass flag (input_boolean) that can be toggled by double-tap
      events or by a dedicated *sensor-action* array.
    • The *sensor-action* array watches any number of entities whose
      state can be “single”, “double”, “unknown” or “unavailable”.
      - “single”  → enable bypass (turn ON the bypass boolean)
      - “double”  → disable bypass (turn OFF the bypass boolean)
      - other states are ignored.
    • All steps use the modern `action:` syntax.
  domain: automation
  source_url: https://github.com/isaackehle/homeassistant/blueprints # optional

  input:
    # ── Sensors ────────────────────────────────────────
    door_sensors:
      name: Door sensors
      description: Binary sensors that indicate a door (or similar) opening.
      selector:
        entity:
          filter:
            domain: binary_sensor
          multiple: true

    motion_sensors:
      name: Motion sensors
      description: Binary sensors that indicate occupancy or motion.
      default: [] # optional
      selector:
        entity:
          filter:
            domain: binary_sensor
          multiple: true

    # ── Action sensors ──────────────
    action_sensors:
      name: Action sensors
      description: |
        List of sensors whose state can be “single”, “double”, “unknown”
        or “unavailable”.  Changing to “single” enables the bypass,
        changing to “double” disables it.
      default: [] # optional
      selector:
        entity:
          filter:
            domain: sensor
          multiple: true

    # ── Timer ──────────────────────────────────────────
    timer_entity:
      name: Motion timer
      description: Timer that keeps the lights on after the last trigger.
      selector:
        entity:
          filter:
            domain: timer
          multiple: false

    timer_reset_duration:
      name: Timer reset duration
      description: How long the timer should stay active after each trigger.
      default: '00:20:00'
      selector:
        text:

    # ── Light groups ───────────────────────────────────
    switches:
      name: Switches and sockets
      description: Main group of lights turned on/off (e.g., ceiling bulbs).
      selector:
        entity:
          filter:
            domain: light
          multiple: true

    dimmers:
      name: Dimmers
      description: Main group of lights on dimmers that need to be set to 100%.
      default: [] # optional
      selector:
        entity:
          filter:
            domain: light
          multiple: true

    # ── Devices that need a color-temp settings ───────────
    rgbw_devices:
      name: White-temperature devices
      description: Device IDs that should be set to 6500 K, 100 % brightness.
      default: [] # optional
      selector:
        device:
          multiple: true # any integration works

    # ── Devices that need pure-white RGB setting ────────
    rgb_devices:
      name: RGB devices
      description: Device IDs that should be set to RGB 255-255-255, 100 % brightness.
      default: [] # optional
      selector:
        device:
          multiple: true # any integration works

    # ── Button events ───────────────────────────────────
    top_button_events:
      name: Top-button event entities
      description: Event entities that fire when a “top” button is pressed.
      default: [] # optional
      selector:
        entity:
          filter:
            domain: event
          multiple: true

    bottom_button_events:
      name: Bottom-button event entities
      description: Event entities that fire when a “bottom” button is pressed.
      default: [] # optional
      selector:
        entity:
          filter:
            domain: event
          multiple: true

    # ── Bypass helper (optional) ───────────────────────
    bypass_boolean:
      name: Bypass helper
      description: |
        Optional `input_boolean` that stores the bypass flag.
        If left empty the automation will ignore bypass logic.
        When supplied, double-tap events and sensor-action changes
        will toggle this helper.
      default: '' # empty = “not supplied”
      selector:
        entity:
          filter:
            domain: input_boolean
          multiple: false

variables:
  timer_reset_duration: !input timer_reset_duration
  bypass_boolean: !input bypass_boolean
  switches: !input switches
  dimmers: !input dimmers
  rgbw_devices: !input rgbw_devices
  rgb_devices: !input rgb_devices
  turn_off_lights_when_timer_ends: >-
    {% if bypass_boolean == '' %}
      true                     # no bypass helper → always turn off
    {% else %}
      {{ states(bypass_boolean) == 'off' }} # bypass helper supplied and off
    {% endif %}

trigger:
  # Door opened -------------------------------------------------
  - trigger: state
    entity_id: !input door_sensors
    to: 'on'
    from: 'off'
    id: door_opened

  # Door closed -------------------------------------------------
  - trigger: state
    entity_id: !input door_sensors
    to: 'off'
    from: 'on'
    id: door_closed

  # Motion detected (any of the listed sensors) ---------------
  - trigger: state
    entity_id: !input motion_sensors
    to: 'on'
    id: motion_detected

  # Timer becomes idle (i.e. expires) -------------------------
  - trigger: state
    entity_id: !input timer_entity
    from: '*'
    to: idle
    id: motion_timer_ended

  # Top-button single press ------------------------------------
  - trigger: state
    entity_id: !input top_button_events
    attribute: event_type
    to: KeyPressed
    id: top_button_single

  # Bottom-button single press ---------------------------------
  - trigger: state
    entity_id: !input bottom_button_events
    attribute: event_type
    to: KeyPressed
    id: bottom_button_single

  # Top-button double press → enable bypass -------------------
  - trigger: state
    entity_id: !input top_button_events
    attribute: event_type
    to: KeyPressed2x
    id: top_button_double

  # Bottom-button double press → disable bypass ----------------
  - trigger: state
    entity_id: !input bottom_button_events
    attribute: event_type
    to: KeyPressed2x
    id: bottom_button_double

  # Action sensors – single ------------------------------------
  - trigger: state
    entity_id: !input action_sensors
    to: 'single'
    id: sensor_action_single

  # Action sensors – double ------------------------------------
  - trigger: state
    entity_id: !input action_sensors
    to: 'double'
    id: sensor_action_double

condition: [] # No global conditions – each branch decides its own flow

action:
  - choose:
      # ── Door opened ───────────────────────────────────────
      - conditions:
          - condition: trigger
            id: door_opened
        sequence:
          - action: timer.set_duration
            data:
              duration: '{{ timer_reset_duration }}'
            target:
              entity_id: !input timer_entity
          - action: timer.pause
            target:
              entity_id: !input timer_entity

          - repeat:
              count: '{{ switches | length }}'
              sequence:
                - action: light.turn_on
                  target:
                    device_id: '{{ switches[repeat.index] }}'
          - repeat:
              count: '{{ dimmers | length }}'
              sequence:
                - action: light.turn_on
                  data:
                    brightness_pct: 100
                  target:
                    device_id: '{{ dimmers[repeat.index] }}'
          # White-temperature devices (optional)
          - repeat:
              count: '{{ rgbw_devices | length }}'
              sequence:
                - action: light.turn_on
                  data:
                    color_temp_kelvin: 6500
                    brightness_pct: 100
                  target:
                    device_id: '{{ rgbw_devices[repeat.index] }}'
          # RGB devices (optional)
          - repeat:
              count: '{{ rgb_devices | length }}'
              sequence:
                - action: light.turn_on
                  data:
                    rgb_color: [255, 255, 255]
                    brightness_pct: 100
                  target:
                    device_id: '{{ rgb_devices[repeat.index] }}'

      # ── Door closed ───────────────────────────────────────
      - conditions:
          - condition: trigger
            id: door_closed
        sequence:
          - action: timer.start
            data:
              duration: '{{ timer_reset_duration }}'
            target:
              entity_id: !input timer_entity

      # ── Motion detected ─────────────────────────────────--
      - conditions:
          - condition: trigger
            id: motion_detected
        sequence:
          - action: timer.start
            data:
              duration: '{{ timer_reset_duration }}'
            target:
              entity_id: !input timer_entity
          - repeat:
              count: '{{ switches | length }}'
              sequence:
                - action: light.turn_on
                  target:
                    device_id: '{{ switches[repeat.index] }}'
          - repeat:
              count: '{{ dimmers | length }}'
              sequence:
                - action: light.turn_on
                  data:
                    brightness_pct: 100
                  target:
                    device_id: '{{ dimmers[repeat.index] }}'
          - repeat:
              count: '{{ rgbw_devices | length }}'
              sequence:
                - action: light.turn_on
                  data:
                    color_temp_kelvin: 6500
                    brightness_pct: 100
                  target:
                    device_id: '{{ rgbw_devices[repeat.index] }}'
          - repeat:
              count: '{{ rgb_devices | length }}'
              sequence:
                - action: light.turn_on
                  data:
                    rgb_color: [255, 255, 255]
                    brightness_pct: 100
                  target:
                    device_id: '{{ rgb_devices[repeat.index] }}'

      # ── Top-button single press → (same as door/motion) ───────
      - conditions:
          - condition: trigger
            id: top_button_single
        sequence:
          - action: timer.start
            data:
              duration: '{{ timer_reset_duration }}'
            target:
              entity_id: !input timer_entity
          - repeat:
              count: '{{ switches | length }}'
              sequence:
                - action: light.turn_on
                  target:
                    device_id: '{{ switches[repeat.index] }}'
          - repeat:
              count: '{{ dimmers | length }}'
              sequence:
                - action: light.turn_on
                  data:
                    brightness_pct: 100
                  target:
                    device_id: '{{ dimmers[repeat.index] }}'
          - repeat:
              count: '{{ rgbw_devices | length }}'
              sequence:
                - action: light.turn_on
                  data:
                    color_temp_kelvin: 6500
                    brightness_pct: 100
                  target:
                    device_id: '{{ rgbw_devices[repeat.index] }}'
          - repeat:
              count: '{{ rgb_devices | length }}'
              sequence:
                - action: light.turn_on
                  data:
                    rgb_color: [255, 255, 255]
                    brightness_pct: 100
                  target:
                    device_id: '{{ rgb_devices[repeat.index] }}'

      # ── Bottom-button single press → turn everything off ───
      - conditions:
          - condition: trigger
            id: bottom_button_single
        sequence:
          - action: timer.cancel
            target:
              entity_id: !input timer_entity
          - repeat:
              count: '{{ switches | length }}'
              sequence:
                - action: light.turn_off
                  target:
                    device_id: '{{ switches[repeat.index] }}'
          - repeat:
              count: '{{ dimmers | length }}'
              sequence:
                - action: light.turn_off
                  target:
                    device_id: '{{ dimmers[repeat.index] }}'
          - repeat:
              count: '{{ rgbw_devices | length }}'
              sequence:
                - action: light.turn_off
                  target:
                    device_id: '{{ rgbw_devices[repeat.index] }}'
          - repeat:
              count: '{{ rgb_devices | length }}'
              sequence:
                - action: light.turn_off
                  target:
                    device_id: '{{ rgb_devices[repeat.index] }}'

      # ── Top-button double press → turn on bypass (if supplied) ───
      - conditions:
          - condition: trigger
            id: top_button_double
          - condition: template
            value_template: "{{ bypass_boolean != '' }}"
        sequence:
          - action: input_boolean.turn_on
            target:
              entity_id: !input bypass_boolean

      # ── Bottom-button double press → turn off bypass (if supplied) ─
      - conditions:
          - condition: trigger
            id: bottom_button_double
          - condition: template
            value_template: "{{ bypass_boolean != '' }}"
        sequence:
          - action: input_boolean.turn_off
            target:
              entity_id: !input bypass_boolean

      # ── Sensor-action: single → enable bypass ─────────────────────
      - conditions:
          - condition: trigger
            id: sensor_action_single
          - condition: template
            value_template: "{{ bypass_boolean != '' }}"
        sequence:
          - action: input_boolean.turn_on
            target:
              entity_id: !input bypass_boolean

      # ── Sensor-action: double → disable bypass ────────────────────
      - conditions:
          - condition: trigger
            id: sensor_action_double
          - condition: template
            value_template: "{{ bypass_boolean != '' }}"
        sequence:
          - action: input_boolean.turn_off
            target:
              entity_id: !input bypass_boolean

      # ── Timer reached idle - turn lights off unless bypass is on ─────────────────
      - conditions:
          - condition: trigger
            id: motion_timer_ended
          # If a bypass helper was supplied we honour its state;
          # otherwise we always turn the lights off.
          - condition: template
            value_template: '{{ turn_off_lights_when_timer_ends | bool }}'
        sequence:
          - repeat:
              count: '{{ switches | length }}'
              sequence:
                - action: light.turn_off
                  target:
                    device_id: '{{ switches[repeat.index] }}'
          - repeat:
              count: '{{ dimmers | length }}'
              sequence:
                - action: light.turn_off
                  target:
                    device_id: '{{ dimmers[repeat.index] }}'
          - repeat:
              count: '{{ rgbw_devices | length }}'
              sequence:
                - action: light.turn_off
                  target:
                    device_id: '{{ rgbw_devices[repeat.index] }}'
          - repeat:
              count: '{{ rgb_devices | length }}'
              sequence:
                - action: light.turn_off
                  target:
                    device_id: '{{ rgb_devices[repeat.index] }}'

mode: single
